name: quibble-action
description: Quibble is for setting up a MediaWiki instance and running various tests against it.
inputs:
  # Docker
  docker-registry:
    default: docker-registry.wikimedia.org
  docker-org:
    default: releng
  quibble-docker-image:
    default: quibble-buster-php81
  coverage-docker-image:
    # There is no quibble-buster-php81-coverage yet
    default: quibble-buster-php74-coverage
  phan-docker-image:
    default: mediawiki-phan-php81

  mediawiki-version:
    default: REL1_43
  stage:
    description: All stages listed at https://doc.wikimedia.org/quibble/usage.html#stages. `phan` and `coverage` also supported.
    default: all
  exclude-known-failures:
    default: true
  exclude-dependencies:
    default: ""
  cache-key:
    default: true
outputs:
  coverage:
    value: /home/runner/cover
runs:
  using: composite
  steps:
    # /home/runner/cache/                               Cache
    # /home/runner/src/                                 Mediawiki installation
    # /home/runner/src/<TYPE>s/<EXTENSION_NAME>/        Clone of the extension repository
    # /home/runner/docker-images/                       Docker images which exported with docker-save command
    # $GITHUB_WORKSPACE/.github/workflows/dependencies  Dependency extensions and skins
    - shell: bash
      run: |
        # Set up
        if [ -e extension.json ]; then
          echo "TYPE=extension" >> $GITHUB_ENV
          echo "EXTENSION_NAME=$(jq -r .name extension.json)" >> $GITHUB_ENV
        elif [ -e skin.json ]; then
          echo "TYPE=skin" >> $GITHUB_ENV
          echo "EXTENSION_NAME=$(jq -r .name skin.json)" >> $GITHUB_ENV
        fi

    - shell: bash
      run: |
        # Get the latest docker tag
        # Ref: https://github.com/thcipriani/dockerregistry
        QUIBBLE_DOCKER_LATEST_TAG="$(curl -sL "https://${{ inputs.docker-registry }}/v2/${{ inputs.docker-org }}/${{ inputs.quibble-docker-image }}/tags/list" |
          python3 -c 'import json;print("\n".join(json.loads(input())["tags"]))' |
          grep -v latest | sort -Vr | head -1)"
        echo "QUIBBLE_DOCKER_LATEST_TAG=${QUIBBLE_DOCKER_LATEST_TAG}" >> $GITHUB_ENV
        if [ "${{ inputs.stage }}" == 'phan' ]; then
          echo "PHAN_DOCKER_LATEST_TAG=$(curl -sL "https://${{ inputs.docker-registry }}/v2/${{ inputs.docker-org }}/${{ inputs.phan-docker-image }}/tags/list" |
            python3 -c 'import json;print("\n".join(json.loads(input())["tags"]))' |
            grep -v latest | sort -Vr | head -1)" >> $GITHUB_ENV
        elif [ "${{ inputs.stage }}" == 'coverage' ]; then
          echo "COVERAGE_DOCKER_LATEST_TAG=$(curl -sL "https://${{ inputs.docker-registry }}/v2/${{ inputs.docker-org }}/${{ inputs.coverage-docker-image }}/tags/list" |
            python3 -c 'import json;print("\n".join(json.loads(input())["tags"]))' |
            grep -v latest | sort -Vr | head -1)" >> $GITHUB_ENV
        fi

    - shell: bash
      run: |
        # Resolve dependencies
        if [ -e .github/workflows/dependencies ]; then
          cd .github/workflows
          curl -sLO https://raw.githubusercontent.com/wikimedia/integration-config/master/zuul/dependencies.yaml
          curl -sLO https://raw.githubusercontent.com/wikimedia/integration-config/master/zuul/phan_dependencies.yaml
          curl -sLO https://raw.githubusercontent.com/wikimedia/integration-config/master/zuul/parameter_functions.py
          curl -sLO https://raw.githubusercontent.com/lens0021/quibble-action/refs/heads/main/resolve_dependencies.py
          DEPENDENCIES="$(python3 resolve_dependencies.py dependencies)"
          if [ "${{ inputs.exclude-known-failures }}" == 'true' ]; then
            if [ "${{ inputs.mediawiki-version }}" == 'master' ]; then
              EXCLUDES=(
                # "GrowthExperiments"
              )
            elif [ "${{ inputs.mediawiki-version }}" == 'REL1_43' ]; then
              EXCLUDES=(
                # "GrowthExperiments"
              )
            fi
            for dep in "${arr[@]}"; do
              DEPENDENCIES="$(echo "$DEPENDENCIES" | grep -v /${dep}$)"
            done
          fi
          for dep in ${{ inputs.exclude-dependencies }}; do
            DEPENDENCIES="$(echo "$DEPENDENCIES" | grep -v /${dep}$)"
          done
          DEPENDENCIES="$(echo $DEPENDENCIES | tr '\n' ' ')"
          echo "DEPENDENCIES=${DEPENDENCIES}" >> $GITHUB_ENV
        fi

    - name: Cache quibble docker image
      uses: actions/cache@v3
      with:
        path: /home/runner/docker-images/${{ inputs.quibble-docker-image }}
        key: ${{ inputs.quibble-docker-image }}:${{ env.QUIBBLE_DOCKER_LATEST_TAG }}-${{ inputs.cache-key }}

    - shell: bash
      run: |
        # Load or pull quibble docker image
        if [ -f /home/runner/docker-images/"${{ inputs.quibble-docker-image }}" ]; then
          docker load -i /home/runner/docker-images/"${{ inputs.quibble-docker-image }}"
        else
          docker pull "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.quibble-docker-image }}:${QUIBBLE_DOCKER_LATEST_TAG}"
        fi

    - name: Cache quibble coverage docker image
      if: inputs.stage == 'coverage'
      uses: actions/cache@v3
      with:
        path: /home/runner/docker-images/${{ inputs.coverage-docker-image }}
        key: ${{ inputs.coverage-docker-image }}:${{ env.COVERAGE_DOCKER_LATEST_TAG }}-${{ inputs.cache-key }}

    - name: Cache phan docker image
      if: inputs.stage == 'phan'
      uses: actions/cache@v3
      with:
        path: /home/runner/docker-images/${{ inputs.env.phan-docker-image  }}
        key: ${{ inputs.phan-docker-image }}:${{ env.PHAN_DOCKER_LATEST_TAG }}-${{ inputs.cache-key }}

    - if: inputs.stage == 'coverage'
      shell: bash
      run: |
        # Load or pull quibble coverage docker image
        if [ -f /home/runner/docker-images/"${{ inputs.coverage-docker-image }}" ]; then
          docker load -i /home/runner/docker-images/"${{ inputs.coverage-docker-image }}"
        else
          docker pull "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.coverage-docker-image }}:${COVERAGE_DOCKER_LATEST_TAG}"
        fi

    - if: inputs.stage == 'phan'
      shell: bash
      run: |
        # Load or pull phan docker image
        if [ -f /home/runner/docker-images/"${{ inputs.phan-docker-image }}" ]; then
          docker load -i /home/runner/docker-images/"${{ inputs.phan-docker-image }}"
        else
          docker pull "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.phan-docker-image }}:${PHAN_DOCKER_LATEST_TAG}"
        fi

    - name: Cache MediaWiki installation
      uses: actions/cache@v3
      with:
        path: /home/runner/src
        key: ${{ runner.os }}-${{ inputs.mediawiki-version }}-${{ hashFiles('.github/workflows/dependencies') }}-${{ inputs.exclude-dependencies }}-${{ inputs.cache-key }}

    - shell: bash
      run: |
        # Download MediaWiki and extensions
        cd /home/runner
        if [ ! -d src ]; then
          git clone -b "${{ inputs.mediawiki-version }}" --depth 1 https://gerrit.wikimedia.org/r/mediawiki/core src
          git clone --recurse-submodules -b "${{ inputs.mediawiki-version }}" --depth 1 https://gerrit.wikimedia.org/r/mediawiki/skins/Vector src/skins/Vector
          for dep in $DEPENDENCIES; do
            if [ "$dep" = 'mediawiki/extensions/Wikibase' ]; then
              git clone -b "${{ inputs.mediawiki-version }}" --depth 1 "https://gerrit.wikimedia.org/r/${dep}" src/"$(echo $dep | cut -d'/' -f2,3)"

              cd src/"$(echo $dep | cut -d'/' -f2,3)"
              # https://gerrit.wikimedia.org/r/q/I2037cd8bb5d568021472e048900649028b5dcc62
              git apply << 'EOF'
        diff --git a/.gitmodules b/.gitmodules
        index df41c768af..e9926d6ddd 100644
        --- a/.gitmodules
        +++ b/.gitmodules
        @@ -3,13 +3,13 @@
         	url = https://gerrit.wikimedia.org/r/data-values/value-view
         [submodule "view/lib/wikibase-serialization"]
         	path = view/lib/wikibase-serialization
        -	url = https://phabricator.wikimedia.org/source/wikibase-serialization.git
        +	url = https://github.com/wmde/WikibaseSerializationJavaScript.git
         [submodule "view/lib/wikibase-data-values"]
         	path = view/lib/wikibase-data-values
        -	url = https://phabricator.wikimedia.org/source/datavalues-javascript.git
        +	url = https://github.com/wmde/DataValuesJavaScript.git
         [submodule "view/lib/wikibase-data-model"]
         	path = view/lib/wikibase-data-model
        -	url = https://phabricator.wikimedia.org/source/wikibase-data-model.git
        +	url = https://github.com/wmde/WikibaseDataModelJavaScript.git
         [submodule "view/lib/wikibase-termbox"]
         	path = view/lib/wikibase-termbox
         	url = https://gerrit.wikimedia.org/r/wikibase/termbox
        EOF
              git submodule update --init
              cd -
            elif [ "$dep" = 'mediawiki/extensions/WikibaseLexeme' ]; then
              git clone -b "${{ inputs.mediawiki-version }}" --depth 1 "https://gerrit.wikimedia.org/r/${dep}" src/"$(echo $dep | cut -d'/' -f2,3)"

              cd src/"$(echo $dep | cut -d'/' -f2,3)"
              # https://gerrit.wikimedia.org/r/q/I2037cd8bb5d568021472e048900649028b5dcc62
              git apply << 'EOF'
        diff --git a/.gitmodules b/.gitmodules
        index 51ab4cd..97dff70 100644
        --- a/.gitmodules
        +++ b/.gitmodules
        @@ -1,3 +1,3 @@
         [submodule "resources/special/new-lexeme"]
         	path = resources/special/new-lexeme
        -	url = https://phabricator.wikimedia.org/diffusion/NLSP/new-lexeme-special-page.git
        +	url = https://github.com/wmde/new-lexeme-special-page.git
        EOF
              git submodule update --init
              cd -
            else
              git clone --recurse-submodules -b "${{ inputs.mediawiki-version }}" --depth 1 "https://gerrit.wikimedia.org/r/${dep}" src/"$(echo $dep | cut -d'/' -f2,3)"
            fi
          done
        fi
        git -C src/ log -n 1 --format="%H"

    - name: Cache dependencies (composer)
      uses: actions/cache@v3
      with:
        path: /home/runner/cache
        key: ${{ runner.os }}-${{ inputs.mediawiki-version }}-${{ hashFiles('**/*.lock') }}-${{ inputs.cache-key }}

    - uses: shivammathur/setup-php@v2
      if: ${{ inputs.stage == 'phan' }}
      with:
        php-version: '7.4'

    - if: ${{ inputs.stage == 'phan' }}
      shell: bash
      run: |
        # Composer install
        if [ -e composer.json ]; then
          composer install --prefer-dist --no-progress --no-interaction # $GITHUB_WORKSPACE
        fi

    - shell: bash
      run: |
        # Prepare directories
        cd /home/runner
        # Move our repository
        mkdir -p cache cover src/skins src/extensions
        sudo cp -r "${GITHUB_WORKSPACE}" "src/${{ env.TYPE }}s/${{ env.EXTENSION_NAME }}"
        chmod 777 src cache cover
        # https://github.com/femiwiki/.github/issues/3
        sudo chown -R nobody:nogroup src cache
        sudo chown $(id -u):$(id -g) src cache

    - shell: bash
      run: |
        # Composer install
        if [ "${{ inputs.stage }}" == 'phan' ] || [ "${{ inputs.stage }}" == 'coverage' ]; then
          cd /home/runner
          docker run \
            --entrypoint quibble-with-supervisord \
            -e "ZUUL_PROJECT=mediawiki/${{ env.TYPE }}s/${{ env.EXTENSION_NAME }}" \
            -v "$(pwd)"/cache:/cache \
            -v "$(pwd)"/src:/workspace/src \
            "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.quibble-docker-image }}:${QUIBBLE_DOCKER_LATEST_TAG}" \
            --skip-zuul \
            --packages-source composer \
            --skip-install \
            --skip all \
            $DEPENDENCIES
        fi

    - if: inputs.stage == 'phan'
      shell: bash
      working-directory: /home/runner
      run: |
        # Phan
        cd /home/runner
        docker run \
          -e "THING_SUBNAME=${{ env.TYPE }}s/${{ env.EXTENSION_NAME }}" \
          -v "$(pwd)"/src:/mediawiki \
          "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.phan-docker-image }}:${PHAN_DOCKER_LATEST_TAG}" \
          --color

    - if: inputs.stage == 'coverage'
      shell: bash
      working-directory: /home/runner
      run: |
        # Coverage
        cd /home/runner
        if [ -d tests/phpunit ]; then
          # MW1.35+ requires PHP7.3 but quibble-coverage is not.
          if [ "${{ inputs.mediawiki-version }}" == 'master' ]; then
            if [ "${TYPE}" == 'skin' ]; then
              COMMEND=mwskin-phpunit-coverage
            else
              COMMEND=mwext-phpunit-coverage
            fi
            docker run \
              --entrypoint quibble-with-supervisord \
              -e "ZUUL_PROJECT=mediawiki/${{ env.TYPE }}s/${{ env.EXTENSION_NAME }}" \
              -v "$(pwd)"/cache:/cache \
              -v "$(pwd)"/src:/workspace/src \
              -v "$(pwd)"/cover:/workspace/cover \
              "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.coverage-docker-image }}:${COVERAGE_DOCKER_LATEST_TAG}" \
              --skip-zuul \
              --skip-deps \
              -c "${COMMEND}"
          fi
        fi

    - if: inputs.stage != 'phan' && inputs.stage != 'coverage'
      shell: bash
      working-directory: /home/runner
      run: |
        # Quibble
        docker run \
          --entrypoint quibble-with-supervisord \
          -e "ZUUL_PROJECT=mediawiki/${{ env.TYPE }}s/${{ env.EXTENSION_NAME }}" \
          -v "$(pwd)"/cache:/cache \
          -v "$(pwd)"/src:/workspace/src \
          "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.quibble-docker-image }}:${QUIBBLE_DOCKER_LATEST_TAG}" \
          --skip-zuul \
          --packages-source composer \
          --run "${{ inputs.stage }}" \
          $DEPENDENCIES

    - shell: bash
      run: |
        # Tear down
        cd /home/runner
        sudo rm -rf "src/${{ env.TYPE }}s/${{ env.EXTENSION_NAME }}"
        # See https://doc.wikimedia.org/quibble/index.html#remove-localsettings-php-between-runs
        rm "$(pwd)"/src/LocalSettings.php || true
        mkdir -p docker-images

        rm "$(pwd)/docker-images/${{ inputs.quibble-docker-image }}" || true
        docker save -o "$(pwd)/docker-images/${{ inputs.quibble-docker-image }}" \
          "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.quibble-docker-image }}:${QUIBBLE_DOCKER_LATEST_TAG}"
        if [ -n "$PHAN_DOCKER_LATEST_TAG" ]; then
          rm "$(pwd)/docker-images/${{ inputs.phan-docker-image }}" || true
          docker save -o "$(pwd)/docker-images/${{ inputs.phan-docker-image }}" \
            "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.phan-docker-image }}:${PHAN_DOCKER_LATEST_TAG}"
        elif [ -n "$COVERAGE_DOCKER_LATEST_TAG" ]; then
          rm "$(pwd)/docker-images/${{ inputs.coverage-docker-image }}" || true
          docker save -o "$(pwd)/docker-images/${{ inputs.coverage-docker-image }}" \
            "${{ inputs.docker-registry }}/${{ inputs.docker-org }}/${{ inputs.coverage-docker-image }}:${COVERAGE_DOCKER_LATEST_TAG}"
        fi
